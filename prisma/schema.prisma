generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  budgets      Budget[]
  goals        Goal[]
  categories   Category[]
  logs         Log[]
  passwordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id        String   @id @default(uuid()) // Identificador único
  userId    String   // Relacionado ao usuário
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique // Código de recuperação (5 dígitos)
  expiresAt DateTime // Expiração do código

  @@index([userId]) // Índice para facilitar a busca pelo usuário
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String
  date        DateTime
  userId      String
  categoryId  String
  goalId      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  category    Category        @relation(fields: [categoryId], references: [id])
  goal        Goal?           @relation(fields: [goalId], references: [id])
}

model Category {
  id           String          @id @default(cuid())
  name         String
  type         TransactionType
  createdById  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  transactions Transaction[]
  createdBy    User            @relation(fields: [createdById], references: [id])
  budgets      Budget[]
  goals        Goal[]
}

model Budget {
  id         String   @id @default(uuid())
  userId     String // Relaciona o orçamento ao usuário
  categoryId String // Categoria do orçamento
  amount     Float // Valor do orçamento (antes estava como Decimal)
  startDate  DateTime // Data de início
  endDate    DateTime // Data de término
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Goal {
  id           String        @id @default(uuid())
  name         String
  targetAmount Decimal
  savedAmount  Decimal       @default(0)
  deadline     DateTime
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  action    String
  details   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  RECEITA
  DESPESA
}
